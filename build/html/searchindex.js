Search.setIndex({"docnames": ["_autosummary/seldonian", "_autosummary/seldonian.candidate_selection", "_autosummary/seldonian.candidate_selection.CandidateSelection", "_autosummary/seldonian.dataset", "_autosummary/seldonian.dataset.DataSet", "_autosummary/seldonian.dataset.DataSetLoader", "_autosummary/seldonian.models", "_autosummary/seldonian.models.model", "_autosummary/seldonian.models.model.ClassificationModel", "_autosummary/seldonian.models.model.LinearClassifierModel", "_autosummary/seldonian.models.model.LinearRegressionModel", "_autosummary/seldonian.models.model.LinearSoftmaxModel", "_autosummary/seldonian.models.model.LogisticRegressionModel", "_autosummary/seldonian.models.model.RLModel", "_autosummary/seldonian.models.model.RegressionModel", "_autosummary/seldonian.models.model.SGDClassifierModel", "_autosummary/seldonian.models.model.SeldonianModel", "_autosummary/seldonian.models.model.SupervisedModel", "_autosummary/seldonian.models.model.TabularSoftmaxModel", "_autosummary/seldonian.optimizers", "_autosummary/seldonian.optimizers.gradient_descent", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam", "_autosummary/seldonian.parse_tree", "_autosummary/seldonian.parse_tree.constraints", "_autosummary/seldonian.parse_tree.nodes", "_autosummary/seldonian.parse_tree.nodes.BaseNode", "_autosummary/seldonian.parse_tree.nodes.ConstantNode", "_autosummary/seldonian.parse_tree.nodes.InternalNode", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode", "_autosummary/seldonian.parse_tree.nodes.Node", "_autosummary/seldonian.parse_tree.parse_tree", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree", "_autosummary/seldonian.safety_test", "_autosummary/seldonian.safety_test.SafetyTest", "_autosummary/seldonian.seldonian_algorithm", "_autosummary/seldonian.seldonian_algorithm.seldonian_algorithm", "_autosummary/seldonian.spec", "_autosummary/seldonian.spec.RLSpec", "_autosummary/seldonian.spec.Spec", "_autosummary/seldonian.spec.SupervisedSpec", "api", "index"], "filenames": ["_autosummary/seldonian.rst", "_autosummary/seldonian.candidate_selection.rst", "_autosummary/seldonian.candidate_selection.CandidateSelection.rst", "_autosummary/seldonian.dataset.rst", "_autosummary/seldonian.dataset.DataSet.rst", "_autosummary/seldonian.dataset.DataSetLoader.rst", "_autosummary/seldonian.models.rst", "_autosummary/seldonian.models.model.rst", "_autosummary/seldonian.models.model.ClassificationModel.rst", "_autosummary/seldonian.models.model.LinearClassifierModel.rst", "_autosummary/seldonian.models.model.LinearRegressionModel.rst", "_autosummary/seldonian.models.model.LinearSoftmaxModel.rst", "_autosummary/seldonian.models.model.LogisticRegressionModel.rst", "_autosummary/seldonian.models.model.RLModel.rst", "_autosummary/seldonian.models.model.RegressionModel.rst", "_autosummary/seldonian.models.model.SGDClassifierModel.rst", "_autosummary/seldonian.models.model.SeldonianModel.rst", "_autosummary/seldonian.models.model.SupervisedModel.rst", "_autosummary/seldonian.models.model.TabularSoftmaxModel.rst", "_autosummary/seldonian.optimizers.rst", "_autosummary/seldonian.optimizers.gradient_descent.rst", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam.rst", "_autosummary/seldonian.parse_tree.rst", "_autosummary/seldonian.parse_tree.constraints.rst", "_autosummary/seldonian.parse_tree.nodes.rst", "_autosummary/seldonian.parse_tree.nodes.BaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.ConstantNode.rst", "_autosummary/seldonian.parse_tree.nodes.InternalNode.rst", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.Node.rst", "_autosummary/seldonian.parse_tree.parse_tree.rst", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree.rst", "_autosummary/seldonian.safety_test.rst", "_autosummary/seldonian.safety_test.SafetyTest.rst", "_autosummary/seldonian.seldonian_algorithm.rst", "_autosummary/seldonian.seldonian_algorithm.seldonian_algorithm.rst", "_autosummary/seldonian.spec.rst", "_autosummary/seldonian.spec.RLSpec.rst", "_autosummary/seldonian.spec.Spec.rst", "_autosummary/seldonian.spec.SupervisedSpec.rst", "api.rst", "index.rst"], "titles": ["seldonian", "seldonian.candidate_selection", "seldonian.candidate_selection.CandidateSelection", "seldonian.dataset", "seldonian.dataset.DataSet", "seldonian.dataset.DataSetLoader", "seldonian.models", "seldonian.models.model", "seldonian.models.model.ClassificationModel", "seldonian.models.model.LinearClassifierModel", "seldonian.models.model.LinearRegressionModel", "seldonian.models.model.LinearSoftmaxModel", "seldonian.models.model.LogisticRegressionModel", "seldonian.models.model.RLModel", "seldonian.models.model.RegressionModel", "seldonian.models.model.SGDClassifierModel", "seldonian.models.model.SeldonianModel", "seldonian.models.model.SupervisedModel", "seldonian.models.model.TabularSoftmaxModel", "seldonian.optimizers", "seldonian.optimizers.gradient_descent", "seldonian.optimizers.gradient_descent.gradient_descent_adam", "seldonian.parse_tree", "seldonian.parse_tree.constraints", "seldonian.parse_tree.nodes", "seldonian.parse_tree.nodes.BaseNode", "seldonian.parse_tree.nodes.ConstantNode", "seldonian.parse_tree.nodes.InternalNode", "seldonian.parse_tree.nodes.MEDCustomBaseNode", "seldonian.parse_tree.nodes.Node", "seldonian.parse_tree.parse_tree", "seldonian.parse_tree.parse_tree.ParseTree", "seldonian.safety_test", "seldonian.safety_test.SafetyTest", "seldonian.seldonian_algorithm", "seldonian.seldonian_algorithm.seldonian_algorithm", "seldonian.spec", "seldonian.spec.RLSpec", "seldonian.spec.Spec", "seldonian.spec.SupervisedSpec", "API", "Welcome to the Seldonian Engine documentation"], "terms": {"engin": 0, "packag": 0, "modul": [0, 1, 6, 19, 22, 32, 34, 36], "candid": [1, 2, 19, 25, 28, 33], "select": [1, 2, 19, 25, 28], "class": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39], "model": [2, 25, 28, 31, 33, 37, 38, 39, 41], "candidate_dataset": 2, "n_safeti": 2, "parse_tre": [2, 33, 37, 38, 39, 41], "primary_object": [2, 21, 37, 38, 39], "optimization_techniqu": [2, 37, 38, 39], "barrier_funct": 2, "optim": [2, 37, 38, 39, 41], "powel": 2, "initial_solut": 2, "none": [2, 29, 37, 38, 39], "regim": [2, 4, 5, 33], "supervis": [2, 33, 39], "write_logfil": 2, "fals": [2, 4, 5, 8, 9, 12, 15, 21, 31, 37, 38, 39], "kwarg": [2, 4, 5, 21, 25, 26, 27, 28, 31, 33], "base": [2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 31, 33, 37, 38, 39], "object": [2, 4, 5, 16, 25, 28, 29, 31, 33, 35, 36, 37, 38, 39], "run": [2, 3, 6, 33, 34, 35, 36, 37, 38, 39], "paramet": [2, 18, 35, 37, 38, 39], "seldonianmodel": [2, 13, 17, 25, 28, 33, 41], "The": [2, 8, 9, 12, 15, 25, 26, 27, 28, 29, 31, 37, 38, 39], "dataset": [2, 10, 14, 25, 28, 31, 33, 37, 38, 39, 41], "contain": [2, 25, 28, 31, 33], "data": [2, 10, 14, 25, 28, 31, 37, 38, 39], "int": [2, 25, 28, 29, 31], "length": 2, "safeti": [2, 22, 25, 28, 32, 33], "us": [2, 9, 10, 15, 25, 28, 31, 37, 38, 39], "when": [2, 8, 9, 12, 15, 25, 29, 31], "predict": [2, 8, 9, 10, 12, 15], "confid": [2, 25, 28, 29, 31, 33], "bound": [2, 25, 26, 28, 29, 31, 33], "dure": 2, "function": [2, 20, 25, 28, 31, 34, 37, 38, 39], "method": [2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 31, 33, 37, 38, 39], "would": 2, "sole": 2, "absenc": 2, "behavior": [2, 31, 33], "constraint": [2, 22, 25, 31, 41], "i": 2, "e": [2, 25, 28, 31], "loss": 2, "str": [2, 25, 26, 27, 28, 29, 31], "g": [2, 25, 28], "gradient_desc": [2, 37, 38, 39, 41], "string": [2, 27, 29, 31], "name": [2, 25, 26, 27, 28, 29], "numpi": [2, 25, 28], "ndarrai": [2, 25, 28], "weight": [2, 9, 10, 15, 25, 28, 37, 38, 39], "initi": [2, 31], "type": [2, 31], "machin": 2, "learn": [2, 39], "algorithm": [2, 3, 6, 28, 31, 34, 35, 36, 37, 38, 39], "rl": [2, 37], "bool": [2, 29, 31, 37, 38, 39], "whether": [2, 29, 31, 37, 38, 39], "write": 2, "output": [2, 8, 9, 12, 15, 37, 38, 39], "disk": 2, "__init__": [2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 31, 33, 37, 38, 39], "evaluate_primary_object": 2, "theta": [2, 8, 9, 10, 12, 14, 15, 18, 25, 28], "get": [2, 31], "valu": [2, 8, 9, 12, 15, 25, 26, 28, 31], "primari": [2, 37, 38, 39], "given": [2, 9, 10, 12, 14, 15, 18, 25, 28, 31, 33], "wrapper": 2, "self": 2, "where": [2, 25, 28, 31], "fix": 2, "input": [2, 25, 28], "gradient": [2, 37, 38, 39], "descent": 2, "get_constraint_upper_bound": 2, "upper": [2, 25, 26, 27, 28, 29, 31], "objective_with_barri": 2, "minimization_techniqu": 2, "barrier": 2, "add": [2, 31], "larg": 2, "penalti": 2, "ani": 2, "ar": [2, 31], "violat": [2, 31], "build": [3, 22, 31, 36], "load": 3, "df": 4, "meta_inform": 4, "label_column": 4, "sensitive_column_nam": [4, 5], "include_sensitive_column": [4, 5], "include_intercept_term": [4, 5], "column_nam": 5, "supervisedmodel": [8, 14, 41], "vector_false_negative_r": [8, 9, 12, 15], "x": [8, 9, 10, 12, 14, 15, 28], "y": [8, 9, 10, 12, 14, 15, 28], "calcul": [8, 9, 10, 12, 14, 15, 25, 28, 31], "neg": [8, 9, 12, 15, 31], "rate": [8, 9, 12, 15], "each": [8, 9, 10, 12, 14, 15, 25, 28, 31], "observ": [8, 9, 12, 15, 25, 28], "thi": [8, 9, 12, 15, 25, 28, 29, 31], "probabl": [8, 9, 12, 15, 31], "subject": [8, 9, 12, 15], "label": [8, 9, 12, 15, 25, 28], "actual": [8, 9, 12, 15], "being": [8, 9, 12, 15, 25], "posit": [8, 9, 12, 15], "between": [8, 9, 12, 15, 28, 31], "0": [8, 9, 12, 15, 21, 25, 28, 29], "1": [8, 9, 10, 12, 14, 15, 25], "vector_false_positive_r": [8, 9, 12, 15], "vector_negative_r": [8, 9, 12, 15], "vector": [8, 9, 10, 12, 14, 15, 18, 25, 28], "vector_positive_r": [8, 9, 12, 15], "vector_true_negative_r": [8, 9, 12, 15], "vector_true_positive_r": [8, 9, 12, 15], "sample_false_negative_r": [8, 9, 12, 15], "whole": [8, 9, 12, 15, 31], "sampl": [8, 9, 10, 12, 14, 15], "sum": [8, 9, 12, 15], "fact": [8, 9, 12, 15], "wa": [8, 9, 12, 15, 28], "sample_false_positive_r": [8, 9, 12, 15], "sample_negative_r": [8, 9, 12, 15], "which": [8, 9, 10, 12, 15, 25, 27, 28, 31], "sample_positive_r": [8, 9, 12, 15], "normal": [8, 9, 12, 15], "number": [8, 9, 12, 15, 25, 28, 31], "classificationmodel": [9, 12, 15, 41], "set": [9, 10, 15, 18, 26], "an": [9, 10, 15, 25, 29, 31, 37, 38, 39], "arrai": [9, 10, 15, 21], "featur": [9, 10, 12, 15, 25, 28, 31], "includ": [9, 10, 15, 31], "offset": [9, 10, 15], "first": [9, 10, 15], "column": [9, 10, 15, 25, 28], "make": [9, 10, 15, 31], "regressionmodel": [10, 41], "sample_mean_error": [10, 14], "mean": [10, 14, 25, 28, 31], "error": [10, 14, 28], "solut": [10, 14, 31, 33], "put": [10, 14, 25], "under": [10, 14], "sample_mean_squared_error": [10, 14], "squar": [10, 14], "vector_mean_error": [10, 14], "point": [10, 14, 28], "return": [10, 14, 25, 28, 31], "vector_mean_squared_error": [10, 14], "environ": [11, 18], "rlmodel": [11, 18, 41], "instanc": [12, 25, 28, 31, 33, 37, 38, 39], "have": [12, 31], "apply_polici": 18, "state": [18, 31], "action": 18, "appli": 18, "softmax": 18, "polici": 18, "well": 18, "flatten": 18, "upper_bound_funct": 21, "theta_init": 21, "2": [21, 28], "lambda_init": 21, "5": 21, "alpha_theta": 21, "05": [21, 25, 28], "alpha_lamb": 21, "beta_veloc": 21, "9": 21, "beta_rmsprop": 21, "num_it": 21, "200": 21, "store_valu": 21, "verbos": 21, "pars": [22, 25, 26, 27, 28, 29, 31, 33], "tree": [22, 25, 26, 27, 28, 29, 31, 33], "from": [22, 25, 26, 27, 28, 31], "fair": 22, "lower": [25, 26, 27, 28, 29, 31], "inf": [25, 27, 28], "conditional_column": [25, 28], "variabl": [25, 28, 31], "leaf": [25, 26, 27], "inherit": [25, 26, 27, 28], "all": [25, 26, 27, 28, 29, 31], "attribut": [25, 26, 27, 28, 31], "float": [25, 26, 28, 29, 31], "list": [25, 28, 33], "measur": 25, "condit": [25, 28], "node_typ": [25, 26], "equal": [25, 31, 37, 38, 39], "base_nod": 25, "delta": [25, 28, 31], "share": 25, "measure_function_nam": 25, "statist": 25, "repres": [25, 26, 27, 31, 33], "fpr": 25, "must": 25, "measure_funct": 25, "py": 25, "calculate_valu": [25, 28], "mask_datafram": [25, 28], "mask": [25, 28], "s": [25, 28, 31], "datafram": [25, 28], "compound": 25, "true": [25, 28, 37, 38, 39], "calculate_data_forbound": [25, 28], "prepar": 25, "zhat": [25, 28], "data_dict": [25, 28], "unbias": 25, "estim": 25, "calculate_bound": [25, 28], "t": [25, 28, 37, 38, 39], "test": [25, 28, 32, 33], "predict_hc_lowerbound": [25, 28], "datas": [25, 28], "high": [25, 28], "we": [25, 28, 31], "expect": [25, 28], "pass": [25, 28], "predict_hc_upperbound": [25, 28], "predict_hc_upper_and_lowerbound": [25, 28], "compute_hc_lowerbound": [25, 28], "compute_hc_upperbound": [25, 28], "compute_hc_upper_and_lowerbound": [25, 28], "default": [25, 28], "infin": [25, 28, 31], "bound_method": [25, 28, 33, 37, 38, 39], "etc": [25, 27, 28], "evalu": [25, 28, 31], "level": [25, 28, 31], "depend": [25, 28], "alwai": [25, 28, 31], "equival": [25, 28], "call": [25, 28], "independ": [25, 28], "joint": [25, 28], "AND": [25, 28], "creat": [25, 28, 31], "dictionari": [25, 28], "constant": [26, 31], "constant_nod": 26, "intern": [27, 31], "non": 27, "These": 27, "oper": [27, 31], "represent": [27, 29], "perform": 27, "basenod": [28, 41], "custom": 28, "pair": 28, "wise": 28, "differ": 28, "male": 28, "femal": 28, "regress": 28, "thoma": 28, "et": 28, "al": 28, "2019": 28, "scienc": 28, "paper": 28, "see": 28, "figur": 28, "overrid": 28, "sever": 28, "parent": 28, "precalculate_data": 28, "preconfigur": 28, "so": 28, "doe": [28, 31], "need": [28, 29, 31, 36], "recalcul": 28, "iter": 28, "through": [28, 31], "ppair": 28, "up": [28, 31], "comput": [28, 31, 33, 37, 38, 39], "y_i": 28, "y_hat_i": 28, "m": [28, 31], "y_j": 28, "y_hat_j": 28, "f": 28, "epsilon": 28, "There": [28, 31], "mai": 28, "same": 28, "row": 28, "min": 28, "n_male": 28, "n_femal": 28, "index": 29, "root": [29, 31], "preced": 29, "post": 29, "order": 29, "left": [29, 31], "child": [29, 31, 33], "right": [29, 31], "will_lower_bound": 29, "will_upper_bound": 29, "__repr__": 29, "also": 29, "what": 29, "shown": 29, "visual": [29, 31], "singl": 31, "node": [31, 41], "via": 31, "assign": 31, "built": [31, 37, 38, 39], "constraint_str": 31, "express": 31, "specifi": 31, "maximum": 31, "can": 31, "n_node": 31, "total": 31, "n_base_nod": 31, "If": [31, 37, 38, 39], "pr": 31, "appear": 31, "more": 31, "than": 31, "onc": 31, "contribut": 31, "base_node_dict": 31, "dict": 31, "keep": 31, "track": 31, "uniqu": 31, "been": 31, "alreadi": 31, "help": 31, "handl": 31, "case": 31, "duplic": 31, "node_fonts": 31, "fontsiz": 31, "graphviz": 31, "create_from_ast": 31, "structur": 31, "mathemat": 31, "_ast_tree_help": 31, "ast_nod": 31, "helper": 31, "_ast2pt_nod": 31, "mapper": 31, "python": 31, "ast": 31, "librari": 31, "assign_delta": 31, "weight_method": 31, "_assign_deltas_help": 31, "assign_bounds_need": 31, "both": 31, "_assign_bounds_help": 31, "propagate_bound": 31, "travers": 31, "propag": 31, "logic": 31, "_propagator_help": 31, "evaluate_constraint": 31, "_evaluator_help": 31, "_propagate_valu": 31, "its": 31, "children": 31, "_protect_nan": 31, "bound_typ": 31, "nan": 31, "postit": 31, "_propag": 31, "interv": 31, "_add": 31, "b": 31, "_sub": 31, "subtract": 31, "_mult": 31, "multipli": 31, "_div": 31, "divid": 31, "_pow": 31, "rais": 31, "power": 31, "experiment": 31, "_min": 31, "minimum": 31, "_max": 31, "_ab": 31, "take": [31, 35, 37, 38, 39], "absolut": 31, "_exp": 31, "reset_base_node_dict": 31, "reset_data": 31, "make_viz": 31, "titl": 31, "graph": 31, "give": 31, "make_viz_help": 31, "bf": 31, "decid": 31, "requir": 31, "eventu": 31, "necessari": 31, "becaus": 31, "end": 31, "care": 31, "about": 31, "how": 31, "you": 31, "want": 31, "split": 31, "among": 31, "written": 31, "syntax": 31, "itself": 31, "bounds_": 31, "postord": 31, "diagram": 31, "displai": 31, "top": 31, "recurs": 31, "edg": 31, "digraph": 31, "reset": 31, "cach": 31, "less": 31, "frequent": 31, "one": [31, 37, 38, 39], "src": 33, "consraint": 33, "candidate_solut": 33, "spec": [35, 41], "specif": [35, 36, 37, 38, 39], "obect": 35, "model_class": [37, 38, 39], "frac_data_in_safeti": [37, 38, 39], "initial_solution_fn": [37, 38, 39], "rl_environment_obj": 37, "use_builtin_primary_gradient_fn": [37, 38, 39], "custom_primary_gradient_fn": [37, 38, 39], "assign_delta_weight_method": [37, 38, 39], "ttest": [37, 38, 39], "adam": [37, 38, 39], "optimization_hyperparam": [37, 38, 39], "regularization_hyperparam": [37, 38, 39], "normalize_return": 37, "exist": [37, 38, 39], "autograd": [37, 38, 39], "deriv": [37, 38, 39], "w": [37, 38, 39], "r": [37, 38, 39], "scalar": [37, 38, 39], "A": [37, 38, 39], "fall": [37, 38, 39], "back": [37, 38, 39], "builtin": [37, 38, 39], "api": 41, "candidate_select": 41, "candidateselect": 41, "datasetload": 41, "linearclassifiermodel": 41, "linearregressionmodel": 41, "linearsoftmaxmodel": 41, "logisticregressionmodel": 41, "sgdclassifiermodel": 41, "tabularsoftmaxmodel": 41, "gradient_descent_adam": 41, "constantnod": 41, "internalnod": 41, "medcustombasenod": 41, "parsetre": 41, "safety_test": 41, "safetytest": 41, "seldonian_algorithm": 41, "rlspec": 41, "supervisedspec": 41}, "objects": {"": [[0, 0, 0, "-", "seldonian"]], "seldonian": [[1, 0, 0, "-", "candidate_selection"], [3, 0, 0, "-", "dataset"], [6, 0, 0, "-", "models"], [19, 0, 0, "-", "optimizers"], [22, 0, 0, "-", "parse_tree"], [32, 0, 0, "-", "safety_test"], [34, 0, 0, "-", "seldonian_algorithm"], [36, 0, 0, "-", "spec"]], "seldonian.candidate_selection": [[2, 1, 1, "", "CandidateSelection"]], "seldonian.candidate_selection.CandidateSelection": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "evaluate_primary_objective"], [2, 2, 1, "", "get_constraint_upper_bound"], [2, 2, 1, "", "objective_with_barrier"], [2, 2, 1, "", "run"]], "seldonian.dataset": [[4, 1, 1, "", "DataSet"], [5, 1, 1, "", "DataSetLoader"]], "seldonian.dataset.DataSet": [[4, 2, 1, "", "__init__"]], "seldonian.dataset.DataSetLoader": [[5, 2, 1, "", "__init__"]], "seldonian.models": [[7, 0, 0, "-", "model"]], "seldonian.models.model": [[8, 1, 1, "", "ClassificationModel"], [9, 1, 1, "", "LinearClassifierModel"], [10, 1, 1, "", "LinearRegressionModel"], [11, 1, 1, "", "LinearSoftmaxModel"], [12, 1, 1, "", "LogisticRegressionModel"], [13, 1, 1, "", "RLModel"], [14, 1, 1, "", "RegressionModel"], [15, 1, 1, "", "SGDClassifierModel"], [16, 1, 1, "", "SeldonianModel"], [17, 1, 1, "", "SupervisedModel"], [18, 1, 1, "", "TabularSoftmaxModel"]], "seldonian.models.model.ClassificationModel": [[8, 2, 1, "", "Vector_False_Negative_Rate"], [8, 2, 1, "", "Vector_False_Positive_Rate"], [8, 2, 1, "", "Vector_Negative_Rate"], [8, 2, 1, "", "Vector_Positive_Rate"], [8, 2, 1, "", "Vector_True_Negative_Rate"], [8, 2, 1, "", "Vector_True_Positive_Rate"], [8, 2, 1, "", "__init__"], [8, 2, 1, "", "sample_False_Negative_Rate"], [8, 2, 1, "", "sample_False_Positive_Rate"], [8, 2, 1, "", "sample_Negative_Rate"], [8, 2, 1, "", "sample_Positive_Rate"]], "seldonian.models.model.LinearClassifierModel": [[9, 2, 1, "", "Vector_False_Negative_Rate"], [9, 2, 1, "", "Vector_False_Positive_Rate"], [9, 2, 1, "", "Vector_Negative_Rate"], [9, 2, 1, "", "Vector_Positive_Rate"], [9, 2, 1, "", "Vector_True_Negative_Rate"], [9, 2, 1, "", "Vector_True_Positive_Rate"], [9, 2, 1, "", "__init__"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "sample_False_Negative_Rate"], [9, 2, 1, "", "sample_False_Positive_Rate"], [9, 2, 1, "", "sample_Negative_Rate"], [9, 2, 1, "", "sample_Positive_Rate"]], "seldonian.models.model.LinearRegressionModel": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "sample_Mean_Error"], [10, 2, 1, "", "sample_Mean_Squared_Error"], [10, 2, 1, "", "vector_Mean_Error"], [10, 2, 1, "", "vector_Mean_Squared_Error"]], "seldonian.models.model.LinearSoftmaxModel": [[11, 2, 1, "", "__init__"]], "seldonian.models.model.LogisticRegressionModel": [[12, 2, 1, "", "Vector_False_Negative_Rate"], [12, 2, 1, "", "Vector_False_Positive_Rate"], [12, 2, 1, "", "Vector_Negative_Rate"], [12, 2, 1, "", "Vector_Positive_Rate"], [12, 2, 1, "", "Vector_True_Negative_Rate"], [12, 2, 1, "", "Vector_True_Positive_Rate"], [12, 2, 1, "", "__init__"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "sample_False_Negative_Rate"], [12, 2, 1, "", "sample_False_Positive_Rate"], [12, 2, 1, "", "sample_Negative_Rate"], [12, 2, 1, "", "sample_Positive_Rate"]], "seldonian.models.model.RLModel": [[13, 2, 1, "", "__init__"]], "seldonian.models.model.RegressionModel": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "sample_Mean_Error"], [14, 2, 1, "", "sample_Mean_Squared_Error"], [14, 2, 1, "", "vector_Mean_Error"], [14, 2, 1, "", "vector_Mean_Squared_Error"]], "seldonian.models.model.SGDClassifierModel": [[15, 2, 1, "", "Vector_False_Negative_Rate"], [15, 2, 1, "", "Vector_False_Positive_Rate"], [15, 2, 1, "", "Vector_Negative_Rate"], [15, 2, 1, "", "Vector_Positive_Rate"], [15, 2, 1, "", "Vector_True_Negative_Rate"], [15, 2, 1, "", "Vector_True_Positive_Rate"], [15, 2, 1, "", "__init__"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "sample_False_Negative_Rate"], [15, 2, 1, "", "sample_False_Positive_Rate"], [15, 2, 1, "", "sample_Negative_Rate"], [15, 2, 1, "", "sample_Positive_Rate"]], "seldonian.models.model.SeldonianModel": [[16, 2, 1, "", "__init__"]], "seldonian.models.model.SupervisedModel": [[17, 2, 1, "", "__init__"]], "seldonian.models.model.TabularSoftmaxModel": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "apply_policy"]], "seldonian.optimizers": [[20, 0, 0, "-", "gradient_descent"]], "seldonian.optimizers.gradient_descent": [[21, 3, 1, "", "gradient_descent_adam"]], "seldonian.parse_tree": [[23, 0, 0, "-", "constraints"], [24, 0, 0, "-", "nodes"], [30, 0, 0, "-", "parse_tree"]], "seldonian.parse_tree.nodes": [[25, 1, 1, "", "BaseNode"], [26, 1, 1, "", "ConstantNode"], [27, 1, 1, "", "InternalNode"], [28, 1, 1, "", "MEDCustomBaseNode"], [29, 1, 1, "", "Node"]], "seldonian.parse_tree.nodes.BaseNode": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "calculate_bounds"], [25, 2, 1, "", "calculate_data_forbound"], [25, 2, 1, "", "calculate_value"], [25, 2, 1, "", "compute_HC_lowerbound"], [25, 2, 1, "", "compute_HC_upper_and_lowerbound"], [25, 2, 1, "", "compute_HC_upperbound"], [25, 2, 1, "", "mask_dataframe"], [25, 2, 1, "", "predict_HC_lowerbound"], [25, 2, 1, "", "predict_HC_upper_and_lowerbound"], [25, 2, 1, "", "predict_HC_upperbound"], [25, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.ConstantNode": [[26, 2, 1, "", "__init__"]], "seldonian.parse_tree.nodes.InternalNode": [[27, 2, 1, "", "__init__"]], "seldonian.parse_tree.nodes.MEDCustomBaseNode": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "calculate_bounds"], [28, 2, 1, "", "calculate_data_forbound"], [28, 2, 1, "", "calculate_value"], [28, 2, 1, "", "compute_HC_lowerbound"], [28, 2, 1, "", "compute_HC_upper_and_lowerbound"], [28, 2, 1, "", "compute_HC_upperbound"], [28, 2, 1, "", "mask_dataframe"], [28, 2, 1, "", "precalculate_data"], [28, 2, 1, "", "predict_HC_lowerbound"], [28, 2, 1, "", "predict_HC_upper_and_lowerbound"], [28, 2, 1, "", "predict_HC_upperbound"], [28, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.Node": [[29, 2, 1, "", "__init__"]], "seldonian.parse_tree.parse_tree": [[31, 1, 1, "", "ParseTree"]], "seldonian.parse_tree.parse_tree.ParseTree": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "assign_bounds_needed"], [31, 2, 1, "", "assign_deltas"], [31, 2, 1, "", "create_from_ast"], [31, 2, 1, "", "evaluate_constraint"], [31, 2, 1, "", "make_viz"], [31, 2, 1, "", "make_viz_helper"], [31, 2, 1, "", "propagate_bounds"], [31, 2, 1, "", "reset_base_node_dict"]], "seldonian.safety_test": [[33, 1, 1, "", "SafetyTest"]], "seldonian.safety_test.SafetyTest": [[33, 2, 1, "", "__init__"]], "seldonian.seldonian_algorithm": [[35, 3, 1, "", "seldonian_algorithm"]], "seldonian.spec": [[37, 1, 1, "", "RLSpec"], [38, 1, 1, "", "Spec"], [39, 1, 1, "", "SupervisedSpec"]], "seldonian.spec.RLSpec": [[37, 2, 1, "", "__init__"]], "seldonian.spec.Spec": [[38, 2, 1, "", "__init__"]], "seldonian.spec.SupervisedSpec": [[39, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"seldonian": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "candidate_select": [1, 2], "candidateselect": 2, "dataset": [3, 4, 5], "datasetload": 5, "model": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "classificationmodel": 8, "linearclassifiermodel": 9, "linearregressionmodel": 10, "linearsoftmaxmodel": 11, "logisticregressionmodel": 12, "rlmodel": 13, "regressionmodel": 14, "sgdclassifiermodel": 15, "seldonianmodel": 16, "supervisedmodel": 17, "tabularsoftmaxmodel": 18, "optim": [19, 20, 21], "gradient_desc": [20, 21], "gradient_descent_adam": 21, "parse_tre": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "constraint": 23, "node": [24, 25, 26, 27, 28, 29], "basenod": 25, "constantnod": 26, "internalnod": 27, "medcustombasenod": 28, "parsetre": 31, "safety_test": [32, 33], "safetytest": 33, "seldonian_algorithm": [34, 35], "spec": [36, 37, 38, 39], "rlspec": 37, "supervisedspec": 39, "api": 40, "welcom": 41, "engin": 41, "document": 41}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 56}})